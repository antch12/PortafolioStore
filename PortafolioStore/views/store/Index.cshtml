@using PortafolioStore
@model StoreViewModel

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <div class="container mt-5">
        <div class="row">
            <!-- Formulario Categoría -->
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        Agregar Categoría
                    </div>
                    <div class="card-body">
                        <form id="form-category">
                            <div class="mb-3">
                                <label class="form-label">Nombre</label>
                                <input name="NewCategory.Name" id="category-name" class="form-control" placeholder="Nombre" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Descripción</label>
                                <input name="NewCategory.Description" id="category-description" class="form-control" placeholder="Descripción" />
                            </div>
                            <button type="submit" class="btn btn-success">Agregar Categoría</button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Formulario Producto -->
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-secondary text-white">
                        Agregar Producto
                    </div>
                    <div class="card-body">
                        <form id="form-product">
                            <div class="mb-3">
                                <label class="form-label">Nombre del producto</label>
                                <input name="NewProduct.Name" id="product-name" class="form-control" placeholder="Nombre del producto" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Descripción</label>
                                <input name="NewProduct.Description" id="product-description" class="form-control" placeholder="Descripción" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Categoría</label>
                                <select name="NewProduct.CategoryId" id="product-category" class="form-select" required>
                                    <option value="">-- Seleccione categoría --</option>
                                    @foreach (var category in Model.Categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                </select>
                            </div>
                            <button type="submit" class="btn btn-primary">Agregar Producto</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lista de Productos -->
        <div class="row">
            <div class="col-12">
                <h3 class="mb-3">Lista de Productos</h3>
                <ul id="product-list" class="list-group">
                    @foreach (var prod in Model.Products)
                    {
                        <li class="list-group-item">
                            <strong>@prod.Name</strong> - @prod.Description
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <script>
        // Función para enviar datos y obtener respuesta JSON
        async function postData(url = '', data = {}) {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            return response.json();
        }

        // Manejo del formulario de categoría
        document.getElementById('form-category').addEventListener('submit', async function (e) {
            e.preventDefault();

            const data = {
                NewCategory: {
                    Name: document.getElementById('category-name').value.trim(),
                    Description: document.getElementById('category-description').value.trim()
                }
            };

            try {
                const result = await postData('@Url.Action("AddCategory")', data);
                if (result.success) {
                    alert('Categoría agregada con éxito');
                    this.reset();
                } else {
                    alert('Error al agregar categoría: ' + result.message);
                }
            } catch (error) {
                alert('Error en la petición: ' + error.message);
            }
        });

        // Manejo del formulario de producto
        document.getElementById('form-product').addEventListener('submit', async function (e) {
            e.preventDefault();

            const data = {
                NewProduct: {
                    Name: document.getElementById('product-name').value.trim(),
                    Description: document.getElementById('product-description').value.trim(),
                    CategoryId: parseInt(document.getElementById('product-category').value)
                }
            };

            try {
                const result = await postData('@Url.Action("AddProduct")', data);
                if (result.success) {
                    alert('Producto agregado con éxito');
                    this.reset();
                    const productList = document.getElementById('product-list');
                    const li = document.createElement('li');
                    li.classList.add('list-group-item');
                    li.innerHTML = `<strong>${data.NewProduct.Name}</strong> - ${data.NewProduct.Description}`;
                    productList.appendChild(li);
                } else {
                    alert('Error al agregar producto: ' + result.message);
                }
            } catch (error) {
                alert('Error en la petición: ' + error.message);
            }
        });
    </script>
</body>
